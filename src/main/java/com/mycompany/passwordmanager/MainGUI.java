/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.passwordmanager;

import com.formdev.flatlaf.FlatDarkLaf;
import java.awt.Desktop;
import java.awt.Image;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.net.URI;
import java.net.URISyntaxException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.List;
import javax.swing.Box;
import javax.swing.DefaultListModel;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.UIManager;
import org.json.JSONArray;
import org.json.JSONObject;
import javax.swing.JLabel;
import javax.swing.JTabbedPane;


public class MainGUI extends javax.swing.JFrame {
    private String username;
    private DefaultListModel<String> listModel;
    private javax.swing.JLabel PasswordStrengthLabel;
    

    public MainGUI(String username) {
        this.username = username;
        initComponents();
        adjustMenuAlignment();
        
        //non riesco ad inserire immagini svg, non viene eliminata la password da eliminare
        
        // Initialize listModel
        listModel = new DefaultListModel<>();
        PasswordsList.setModel(listModel);
        
        // logo application
        Image icon = new ImageIcon(this.getClass().getResource("/images/logoIcon.png")).getImage();
        this.setIconImage(icon);

        
        
        boolean logged = username != null;
        LoginMenu.setEnabled(!logged);
        LogoutMenu.setEnabled(logged);
        LoginMenu2.setEnabled(!logged);
        SaveButton2.setEnabled(logged);
        EntryListMenu.setEnabled(logged);
        NewEntryMenu.setEnabled(logged);
        DeletePasswordMenu.setEnabled(logged);
        RegisterMenu.setEnabled(!logged);
        LogoutMenu2.setEnabled(logged);
        MainPanel.setEnabledAt(1, logged);
        MainPanel.setEnabledAt(2, logged);
        MainPanel.setEnabledAt(3, logged);
        
        if (logged) {
            List<Entry> entries = GetEntryListFromJSON(null, null);     

            listModel = new DefaultListModel<>();
            for (Entry entry : entries) {
                listModel.addElement(entry.toString());
            }
            PasswordsList.setModel(listModel);
            
            //sostituisce la parola login con il nome dell'account loggato
            LoginMenu.setText(username);
        }
        
        
    }
    private void adjustMenuAlignment() {
        // Create a horizontal glue
        Box.Filler horizontalGlue = new Box.Filler(
            new java.awt.Dimension(0, 0), 
            new java.awt.Dimension(0, 0), 
            new java.awt.Dimension(Integer.MAX_VALUE, 0)
        );
        
        // Add the glue to the menu bar before the Help menu
        jMenuBar1.add(horizontalGlue, 3); // Insert at the correct position
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        SavePasswordButton = new javax.swing.JButton();
        SeePasswordsButton = new javax.swing.JToggleButton();
        jRadioButtonMenuItem1 = new javax.swing.JRadioButtonMenuItem();
        MainPanel = new javax.swing.JTabbedPane();
        PasswordGeneratorPanel = new javax.swing.JPanel();
        OutputPassword = new javax.swing.JTextField();
        GeneratePasswordButton = new javax.swing.JButton();
        Symbol = new javax.swing.JCheckBox();
        Uppercase = new javax.swing.JCheckBox();
        LowercaseLetters = new javax.swing.JCheckBox();
        Numbers = new javax.swing.JCheckBox();
        PasswordSize = new javax.swing.JSpinner();
        jLabel7 = new javax.swing.JLabel();
        SaveButton2 = new javax.swing.JToggleButton();
        SecurityPassword = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        NewEntryPanel = new javax.swing.JPanel();
        Password = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        Note = new javax.swing.JTextArea();
        jLabel5 = new javax.swing.JLabel();
        CancelButton = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        SaveButton = new javax.swing.JButton();
        AccountName = new javax.swing.JTextField();
        Email = new javax.swing.JTextField();
        SecurityPassword2 = new javax.swing.JLabel();
        EntryListPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        PasswordsList = new javax.swing.JList<>();
        jLabel1 = new javax.swing.JLabel();
        PasswordSearchButton = new javax.swing.JButton();
        PasswordSearch = new javax.swing.JTextField();
        DeletePasswordPanel = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        PasswordToDelete = new javax.swing.JTextField();
        DeletePasswordButton = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        EntryListMenu = new javax.swing.JMenu();
        PasswordGeneratorMenu = new javax.swing.JMenuItem();
        NewEntryMenu = new javax.swing.JMenuItem();
        EntryListMenu2 = new javax.swing.JMenuItem();
        DeletePasswordMenu = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        LoginMenu2 = new javax.swing.JMenuItem();
        LogoutMenu2 = new javax.swing.JMenuItem();
        RegisterMenu = new javax.swing.JMenuItem();
        CreditsMenu = new javax.swing.JMenu();
        MyGitHub = new javax.swing.JMenuItem();
        MyFacebook = new javax.swing.JMenuItem();
        MyLinkedin = new javax.swing.JMenuItem();
        LoginMenu = new javax.swing.JMenu();
        LogoutMenu = new javax.swing.JMenu();

        SavePasswordButton.setText("Save a password");
        SavePasswordButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SavePasswordButtonActionPerformed(evt);
            }
        });

        SeePasswordsButton.setText("See my password");
        SeePasswordsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SeePasswordsButtonActionPerformed(evt);
            }
        });

        jRadioButtonMenuItem1.setSelected(true);
        jRadioButtonMenuItem1.setText("jRadioButtonMenuItem1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        PasswordGeneratorPanel.setBackground(new java.awt.Color(51, 51, 51));
        PasswordGeneratorPanel.setForeground(new java.awt.Color(51, 51, 51));

        OutputPassword.setBackground(new java.awt.Color(102, 102, 102));
        OutputPassword.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OutputPasswordActionPerformed(evt);
            }
        });

        GeneratePasswordButton.setText("Generate Password");
        GeneratePasswordButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GeneratePasswordButtonActionPerformed(evt);
            }
        });

        Symbol.setText(" Special characters");

        Uppercase.setText("Uppercase");

        LowercaseLetters.setText("Lowercase letters");

        Numbers.setText("Numbers");

        PasswordSize.setToolTipText("Password size");

        jLabel7.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel7.setText("Choose options to generate your password:");

        SaveButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/file.png"))); // NOI18N
        SaveButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SaveButton2ActionPerformed(evt);
            }
        });

        jLabel8.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jLabel8.setText("Password generator");

        javax.swing.GroupLayout PasswordGeneratorPanelLayout = new javax.swing.GroupLayout(PasswordGeneratorPanel);
        PasswordGeneratorPanel.setLayout(PasswordGeneratorPanelLayout);
        PasswordGeneratorPanelLayout.setHorizontalGroup(
            PasswordGeneratorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PasswordGeneratorPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(PasswordGeneratorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, PasswordGeneratorPanelLayout.createSequentialGroup()
                        .addComponent(jLabel8)
                        .addGap(274, 274, 274))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, PasswordGeneratorPanelLayout.createSequentialGroup()
                        .addGroup(PasswordGeneratorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(PasswordGeneratorPanelLayout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(OutputPassword, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, PasswordGeneratorPanelLayout.createSequentialGroup()
                                .addGroup(PasswordGeneratorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(Symbol, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(LowercaseLetters, javax.swing.GroupLayout.Alignment.LEADING))
                                .addGap(0, 329, Short.MAX_VALUE)))
                        .addGap(18, 18, 18)
                        .addComponent(SaveButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(205, 205, 205))
                    .addGroup(PasswordGeneratorPanelLayout.createSequentialGroup()
                        .addGroup(PasswordGeneratorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(Numbers, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 287, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Uppercase, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, PasswordGeneratorPanelLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(PasswordGeneratorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, PasswordGeneratorPanelLayout.createSequentialGroup()
                        .addGroup(PasswordGeneratorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(SecurityPassword, javax.swing.GroupLayout.PREFERRED_SIZE, 206, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(GeneratePasswordButton))
                        .addGap(209, 209, 209))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, PasswordGeneratorPanelLayout.createSequentialGroup()
                        .addComponent(PasswordSize, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(317, 317, 317))))
        );
        PasswordGeneratorPanelLayout.setVerticalGroup(
            PasswordGeneratorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PasswordGeneratorPanelLayout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(jLabel8)
                .addGap(31, 31, 31)
                .addComponent(jLabel7)
                .addGap(18, 18, 18)
                .addGroup(PasswordGeneratorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Symbol)
                    .addComponent(Uppercase))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(PasswordSize, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(2, 2, 2)
                .addGroup(PasswordGeneratorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(LowercaseLetters)
                    .addComponent(Numbers))
                .addGap(54, 54, 54)
                .addGroup(PasswordGeneratorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(OutputPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(SaveButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(GeneratePasswordButton)
                .addGap(18, 18, 18)
                .addComponent(SecurityPassword, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(112, 112, 112))
        );

        MainPanel.addTab("Password generator", PasswordGeneratorPanel);

        NewEntryPanel.setBackground(new java.awt.Color(51, 51, 51));

        Password.setToolTipText("To find out how secure your password is, press enter");
        Password.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PasswordActionPerformed(evt);
            }
        });

        jLabel2.setText("Account name");

        jLabel3.setText("Email");

        jLabel4.setText("Password");

        Note.setColumns(20);
        Note.setRows(5);
        jScrollPane2.setViewportView(Note);

        jLabel5.setText("Note");

        CancelButton.setBackground(new java.awt.Color(255, 0, 0));
        CancelButton.setText("Cancel");
        CancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CancelButtonActionPerformed(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jLabel6.setText("Save password");

        SaveButton.setBackground(new java.awt.Color(0, 102, 255));
        SaveButton.setText("Save");
        SaveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SaveButtonActionPerformed(evt);
            }
        });

        AccountName.setToolTipText("Required field");

        Email.setToolTipText("Required field");
        Email.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EmailActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout NewEntryPanelLayout = new javax.swing.GroupLayout(NewEntryPanel);
        NewEntryPanel.setLayout(NewEntryPanelLayout);
        NewEntryPanelLayout.setHorizontalGroup(
            NewEntryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(NewEntryPanelLayout.createSequentialGroup()
                .addGroup(NewEntryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(NewEntryPanelLayout.createSequentialGroup()
                        .addGap(145, 145, 145)
                        .addGroup(NewEntryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(NewEntryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(NewEntryPanelLayout.createSequentialGroup()
                                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(8, 8, 8)))
                        .addGap(63, 63, 63)
                        .addGroup(NewEntryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(Email, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(AccountName, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Password, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.LEADING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(SecurityPassword2, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(NewEntryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(NewEntryPanelLayout.createSequentialGroup()
                            .addContainerGap()
                            .addComponent(CancelButton)
                            .addGap(18, 18, 18)
                            .addComponent(SaveButton)
                            .addGap(30, 30, 30))
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, NewEntryPanelLayout.createSequentialGroup()
                            .addGap(269, 269, 269)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(39, 39, 39))
        );
        NewEntryPanelLayout.setVerticalGroup(
            NewEntryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(NewEntryPanelLayout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(jLabel6)
                .addGap(38, 38, 38)
                .addGroup(NewEntryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(AccountName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addGap(12, 12, 12)
                .addGroup(NewEntryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Email, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addGap(9, 9, 9)
                .addGroup(NewEntryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Password, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(SecurityPassword2, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(NewEntryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(NewEntryPanelLayout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(28, 28, 28)
                        .addGroup(NewEntryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(CancelButton)
                            .addComponent(SaveButton)))
                    .addGroup(NewEntryPanelLayout.createSequentialGroup()
                        .addGap(45, 45, 45)
                        .addComponent(jLabel5)))
                .addContainerGap(102, Short.MAX_VALUE))
        );

        MainPanel.addTab("New entry", NewEntryPanel);

        EntryListPanel.setBackground(new java.awt.Color(51, 51, 51));

        PasswordsList.setBackground(new java.awt.Color(102, 102, 102));
        PasswordsList.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane1.setViewportView(PasswordsList);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jLabel1.setText("Password list");

        PasswordSearchButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/lenteIngrandimento.png"))); // NOI18N
        PasswordSearchButton.setText("jButton1");
        PasswordSearchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PasswordSearchButtonActionPerformed(evt);
            }
        });

        PasswordSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PasswordSearchActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout EntryListPanelLayout = new javax.swing.GroupLayout(EntryListPanel);
        EntryListPanel.setLayout(EntryListPanelLayout);
        EntryListPanelLayout.setHorizontalGroup(
            EntryListPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(EntryListPanelLayout.createSequentialGroup()
                .addContainerGap(255, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(81, 81, 81)
                .addComponent(PasswordSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(PasswordSearchButton, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(49, 49, 49))
            .addGroup(EntryListPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addContainerGap())
        );
        EntryListPanelLayout.setVerticalGroup(
            EntryListPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(EntryListPanelLayout.createSequentialGroup()
                .addGap(11, 11, 11)
                .addGroup(EntryListPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(PasswordSearchButton, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(PasswordSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 410, Short.MAX_VALUE))
        );

        MainPanel.addTab("Entry list", EntryListPanel);

        DeletePasswordPanel.setBackground(new java.awt.Color(51, 51, 51));

        jLabel9.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jLabel9.setText("Delete password");

        jLabel10.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel10.setText("Enter  the password to delete:");

        DeletePasswordButton.setBackground(new java.awt.Color(255, 0, 0));
        DeletePasswordButton.setText("Delete");
        DeletePasswordButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeletePasswordButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout DeletePasswordPanelLayout = new javax.swing.GroupLayout(DeletePasswordPanel);
        DeletePasswordPanel.setLayout(DeletePasswordPanelLayout);
        DeletePasswordPanelLayout.setHorizontalGroup(
            DeletePasswordPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(DeletePasswordPanelLayout.createSequentialGroup()
                .addGroup(DeletePasswordPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(DeletePasswordPanelLayout.createSequentialGroup()
                        .addGap(260, 260, 260)
                        .addGroup(DeletePasswordPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(PasswordToDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel10)
                            .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(DeletePasswordPanelLayout.createSequentialGroup()
                        .addGap(314, 314, 314)
                        .addComponent(DeletePasswordButton)))
                .addContainerGap(256, Short.MAX_VALUE))
        );
        DeletePasswordPanelLayout.setVerticalGroup(
            DeletePasswordPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(DeletePasswordPanelLayout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addComponent(jLabel9)
                .addGap(46, 46, 46)
                .addComponent(jLabel10)
                .addGap(18, 18, 18)
                .addComponent(PasswordToDelete, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(DeletePasswordButton)
                .addContainerGap(262, Short.MAX_VALUE))
        );

        MainPanel.addTab("Delete password", DeletePasswordPanel);

        EntryListMenu.setText("Operations");

        PasswordGeneratorMenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_G, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        PasswordGeneratorMenu.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/PasswordGenerator.png"))); // NOI18N
        PasswordGeneratorMenu.setText("Password generator");
        PasswordGeneratorMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PasswordGeneratorMenuActionPerformed(evt);
            }
        });
        EntryListMenu.add(PasswordGeneratorMenu);

        NewEntryMenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_E, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        NewEntryMenu.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/add-security.png"))); // NOI18N
        NewEntryMenu.setText("New entry");
        NewEntryMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NewEntryMenuActionPerformed(evt);
            }
        });
        EntryListMenu.add(NewEntryMenu);

        EntryListMenu2.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_L, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        EntryListMenu2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/list.png"))); // NOI18N
        EntryListMenu2.setText("Entry list");
        EntryListMenu2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EntryListMenu2ActionPerformed(evt);
            }
        });
        EntryListMenu.add(EntryListMenu2);

        DeletePasswordMenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_D, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        DeletePasswordMenu.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/delete.png"))); // NOI18N
        DeletePasswordMenu.setText("Delete password");
        DeletePasswordMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeletePasswordMenuActionPerformed(evt);
            }
        });
        EntryListMenu.add(DeletePasswordMenu);

        jMenuBar1.add(EntryListMenu);

        jMenu2.setText("Account");

        LoginMenu2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/Login.png"))); // NOI18N
        LoginMenu2.setText("Login");
        LoginMenu2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LoginMenu2ActionPerformed(evt);
            }
        });
        jMenu2.add(LoginMenu2);

        LogoutMenu2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/Logout.png"))); // NOI18N
        LogoutMenu2.setText("Logout");
        LogoutMenu2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LogoutMenu2ActionPerformed(evt);
            }
        });
        jMenu2.add(LogoutMenu2);

        RegisterMenu.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/UserRegister.png"))); // NOI18N
        RegisterMenu.setText("Register");
        RegisterMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RegisterMenuActionPerformed(evt);
            }
        });
        jMenu2.add(RegisterMenu);

        jMenuBar1.add(jMenu2);

        CreditsMenu.setText("Credits");

        MyGitHub.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/github.png"))); // NOI18N
        MyGitHub.setText("My GitHub");
        MyGitHub.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MyGitHubActionPerformed(evt);
            }
        });
        CreditsMenu.add(MyGitHub);

        MyFacebook.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/facebook.png"))); // NOI18N
        MyFacebook.setText("My Facebook");
        MyFacebook.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MyFacebookActionPerformed(evt);
            }
        });
        CreditsMenu.add(MyFacebook);

        MyLinkedin.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/linkedin.png"))); // NOI18N
        MyLinkedin.setText("My Linkedin");
        MyLinkedin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MyLinkedinActionPerformed(evt);
            }
        });
        CreditsMenu.add(MyLinkedin);

        jMenuBar1.add(CreditsMenu);

        LoginMenu.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/Login.png"))); // NOI18N
        LoginMenu.setText("Login");
        LoginMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LoginMenuActionPerformed(evt);
            }
        });
        jMenuBar1.add(LoginMenu);

        LogoutMenu.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/Logout.png"))); // NOI18N
        LogoutMenu.setText("Logout");
        LogoutMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LogoutMenuActionPerformed(evt);
            }
        });
        jMenuBar1.add(LogoutMenu);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(MainPanel))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(MainPanel)
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

        
    private void SavePasswordButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SavePasswordButtonActionPerformed
        WritePasswordToJSON(AccountName.getText(), Email.getText(), Password.getText(), Note.getText());
        JOptionPane.showMessageDialog(this, "Password saved successfully!", "Password saved", JOptionPane.OK_OPTION);
        dispose(); // Chiude il frame
        displayEntries(null);
    }//GEN-LAST:event_SavePasswordButtonActionPerformed

    private void SeePasswordsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SeePasswordsButtonActionPerformed
        
    }//GEN-LAST:event_SeePasswordsButtonActionPerformed

    private void DeletePasswordButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeletePasswordButtonActionPerformed
        String passwordToDelete = PasswordToDelete.getText().trim();

        // Ottieni la lista aggiornata delle voci escludendo quella da eliminare
        List<Entry> updatedEntries = GetEntryListFromJSON(null, passwordToDelete);

        // Se la lista è stata correttamente aggiornata, visualizzala
        if (updatedEntries != null) {
            displayEntries(updatedEntries);

            // Aggiorna il file JSON con le voci aggiornate (opzionale, se necessario)
            saveEntriesToJson(updatedEntries);
            JOptionPane.showMessageDialog(this, "Password delete succesfully!.", "Password delete", JOptionPane.OK_OPTION);

        } else {
            // Gestisci il caso in cui non sia stato possibile ottenere le voci aggiornate
            JOptionPane.showMessageDialog(this, "Error deleting password.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_DeletePasswordButtonActionPerformed

    private void PasswordSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PasswordSearchActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_PasswordSearchActionPerformed

    private void PasswordSearchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PasswordSearchButtonActionPerformed
        String passwordSearch = PasswordSearch.getText().trim();
        List<Entry> filteredEntries = GetEntryListFromJSON(passwordSearch, null);
        displayEntries(filteredEntries);
    }//GEN-LAST:event_PasswordSearchButtonActionPerformed

    private void EmailActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EmailActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_EmailActionPerformed

    private void SaveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SaveButtonActionPerformed
        WritePasswordToJSON(AccountName.getText(), Email.getText(), Password.getText(), Note.getText());
        JOptionPane.showMessageDialog(this, "Password saved successfully!", "Password saved", JOptionPane.OK_OPTION);
        if (isUserLoggedIn()) {
            displayEntries(null);
        }

    }//GEN-LAST:event_SaveButtonActionPerformed

    private void CancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CancelButtonActionPerformed
        dispose();  // Chiude il frame
    }//GEN-LAST:event_CancelButtonActionPerformed

    private void PasswordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PasswordActionPerformed
        String enteredPassword = Password.getText();

        // Calcolare la forza della password digitata
        int strength = calculatePasswordStrength(enteredPassword);
        String strengthText = getStrengthText(strength); // Funzione per ottenere il testo descrittivo della forza

        // Aggiornare la JLabel con la forza calcolata
        SecurityPassword2.setText("Password Strength: " + strengthText);
    }//GEN-LAST:event_PasswordActionPerformed

    private void SaveButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SaveButton2ActionPerformed
        MainPanel.setSelectedComponent(NewEntryPanel);
    }//GEN-LAST:event_SaveButton2ActionPerformed

    private void GeneratePasswordButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GeneratePasswordButtonActionPerformed
        Integer passwordSize = (Integer) PasswordSize.getValue();

        boolean useLower = LowercaseLetters.isSelected();
        boolean useUpper = Uppercase.isSelected();
        boolean useNumbers = Numbers.isSelected();
        boolean useSymbols = Symbol.isSelected();

        String generatedPassword = generatePassword(passwordSize, useLower, useUpper, useNumbers, useSymbols);

        if (generatedPassword.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Seleziona almeno un'opzione per generare la password.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        OutputPassword.setText(generatedPassword);

        // Calcolare la forza della password generata
        int strength = calculatePasswordStrength(generatedPassword);
        String strengthText = getStrengthText(strength); // Funzione per ottenere il testo descrittivo della forza

        // Aggiornare la JLabel con la forza calcolata
        SecurityPassword.setText("Password Strength: " + strengthText);
    }//GEN-LAST:event_GeneratePasswordButtonActionPerformed

    private void OutputPasswordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OutputPasswordActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_OutputPasswordActionPerformed

    private void LoginMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LoginMenuActionPerformed
        LoginGUI loginFrame = new LoginGUI();
        loginFrame.setVisible(true);

        dispose();
    }//GEN-LAST:event_LoginMenuActionPerformed

    private void EntryListMenu2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EntryListMenu2ActionPerformed
       MainPanel.setSelectedComponent(EntryListPanel);
    }//GEN-LAST:event_EntryListMenu2ActionPerformed

    private void NewEntryMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NewEntryMenuActionPerformed
        MainPanel.setSelectedComponent(NewEntryPanel);
    }//GEN-LAST:event_NewEntryMenuActionPerformed

    private void PasswordGeneratorMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PasswordGeneratorMenuActionPerformed
        MainPanel.setSelectedComponent(PasswordGeneratorPanel);
    }//GEN-LAST:event_PasswordGeneratorMenuActionPerformed

    private void LogoutMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LogoutMenuActionPerformed
        LoginGUI loginFrame = new LoginGUI();
        loginFrame.setVisible(true);

        dispose();
    }//GEN-LAST:event_LogoutMenuActionPerformed

    private void DeletePasswordMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeletePasswordMenuActionPerformed
        MainPanel.setSelectedComponent(DeletePasswordPanel);
    }//GEN-LAST:event_DeletePasswordMenuActionPerformed

    private void LoginMenu2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LoginMenu2ActionPerformed
        LoginGUI loginFrame = new LoginGUI();
        loginFrame.setVisible(true);

        dispose();
    }//GEN-LAST:event_LoginMenu2ActionPerformed

    private void LogoutMenu2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LogoutMenu2ActionPerformed
        LoginGUI loginFrame = new LoginGUI();
        loginFrame.setVisible(true);

        dispose();
    }//GEN-LAST:event_LogoutMenu2ActionPerformed

    private void RegisterMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RegisterMenuActionPerformed
        RegisterGUI registerFrame = new RegisterGUI();
        registerFrame.setVisible(true);

        dispose();
    }//GEN-LAST:event_RegisterMenuActionPerformed

    private void MyGitHubActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MyGitHubActionPerformed
         // URL del sito web da aprire
                String url = "https://github.com/LorenzoBertinelli";
                
                // Tentativo di aprire il sito web nel browser predefinito
                if (Desktop.isDesktopSupported()) {
                    Desktop desktop = Desktop.getDesktop();
                    try {
                        desktop.browse(new URI(url));
                    } catch (IOException | URISyntaxException ex) {
                        ex.printStackTrace();
                    }
                } else {
                    System.err.println("Desktop non supportato. Impossibile aprire il sito web.");
                }
    }//GEN-LAST:event_MyGitHubActionPerformed

    private void MyFacebookActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MyFacebookActionPerformed
         // URL del sito web da aprire
                String url = "https://www.facebook.com/profile.php?id=100073820334511&locale=it_IT";
                
                // Tentativo di aprire il sito web nel browser predefinito
                if (Desktop.isDesktopSupported()) {
                    Desktop desktop = Desktop.getDesktop();
                    try {
                        desktop.browse(new URI(url));
                    } catch (IOException | URISyntaxException ex) {
                        ex.printStackTrace();
                    }
                } else {
                    System.err.println("Desktop non supportato. Impossibile aprire il sito web.");
                }
    }//GEN-LAST:event_MyFacebookActionPerformed

    private void MyLinkedinActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MyLinkedinActionPerformed
        // URL del sito web da aprire
                String url = "https://www.linkedin.com/in/lorenzo-bertinelli-822718310/";
                
                // Tentativo di aprire il sito web nel browser predefinito
                if (Desktop.isDesktopSupported()) {
                    Desktop desktop = Desktop.getDesktop();
                    try {
                        desktop.browse(new URI(url));
                    } catch (IOException | URISyntaxException ex) {
                        ex.printStackTrace();
                    }
                } else {
                    System.err.println("Desktop non supportato. Impossibile aprire il sito web.");
                }
    }//GEN-LAST:event_MyLinkedinActionPerformed
    public void WritePasswordToJSON(String accountName, String email, String password, String note) {
        String filePath = username + ".json";

        JSONObject newEntry = new JSONObject();
        newEntry.put("AccountName", accountName);
        newEntry.put("Email", email);
        newEntry.put("Password", password);
        newEntry.put("Note", note);

        try {
            File file = new File(filePath);
            JSONArray jsonArray;

            if (file.exists()) {
                String content = new String(Files.readAllBytes(Paths.get(filePath)));
                if (content.isEmpty()) {
                    jsonArray = new JSONArray();
                } else {
                    jsonArray = new JSONArray(content);
                }
            } else {
                jsonArray = new JSONArray();
            }

            jsonArray.put(newEntry);

            try (FileWriter fileWriter = new FileWriter(filePath)) {
                fileWriter.write(jsonArray.toString(4));
            }

            if (accountName.isEmpty() || email.isEmpty() || password.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Inserire il testo nei campi obbligatori", "Failure", JOptionPane.ERROR_MESSAGE);
                return;
            }

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private void displayEntries(List<Entry> entries) {
        listModel.clear(); // Pulisci la lista prima di aggiungere le nuove voci
        if (entries != null && !entries.isEmpty()) {
            for (Entry entry : entries) {
                listModel.addElement(entry.toString());
            }
        } else {
            listModel.clear(); // Pulisci la lista se non ci sono voci trovate
        }
    }


    private List<Entry> GetEntryListFromJSON(String passwordSearch, String passwordToDelete) {
        String filePath = username + ".json";
        StringBuilder jsonData = new StringBuilder();

        try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {
            String line;
            while ((line = br.readLine()) != null) {
                jsonData.append(line);
            }

            JSONArray jsonArray = new JSONArray(jsonData.toString());
            List<Entry> entries = new ArrayList<>();

            for (int i = 0; i < jsonArray.length(); i++) {
                JSONObject jsonObject = jsonArray.getJSONObject(i);
                String accountName = jsonObject.optString("AccountName", "N/A");
                String password = jsonObject.optString("Password", "N/A");
                String email = jsonObject.optString("Email", "N/A");
                String note = jsonObject.optString("Note", "N/A");

                Entry entry = new Entry(accountName, password, email, note);

                // Aggiungi l'entry alla lista se la password non corrisponde a quella da eliminare
                if (!(passwordToDelete != null && !passwordToDelete.isEmpty() && password.equals(passwordToDelete))) {
                    // Verifica la password di ricerca solo se è fornita e non è vuota
                    if (passwordSearch == null || passwordSearch.isEmpty() || password.toLowerCase().contains(passwordSearch.toLowerCase())) {
                        entries.add(entry);
                    }
                }
            }

            return entries;

        } catch (IOException e) {
            e.printStackTrace();
        }
        return null;
    }

    

    private boolean isUserLoggedIn() {
        return username != null && !username.isEmpty();
    }

    
    // Metodo per salvare le voci aggiornate nel file JSON (opzionale, se necessario)
    private void saveEntriesToJson(List<Entry> entries) {
        String filePath = username + ".json";
        JSONArray jsonArray = new JSONArray();

        for (Entry entry : entries) {
            JSONObject jsonObject = new JSONObject();
            jsonObject.put("AccountName", entry.getAccountName());
            jsonObject.put("Password", entry.getPassword());
            jsonObject.put("Email", entry.getEmail());
            jsonObject.put("Note", entry.getNote());
            jsonArray.put(jsonObject);
        }

        try (FileWriter fileWriter = new FileWriter(filePath)) {
            fileWriter.write(jsonArray.toString(4)); // Indentazione di 4 spazi per formattare il JSON
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
    
    private String generatePassword(int length, boolean useLower, boolean useUpper, boolean useNumbers, boolean useSymbols) {
        StringBuilder password = new StringBuilder(length);
        SecureRandom random = new SecureRandom();
        
        List<String> charCategories = new ArrayList<>();
        if (useLower) charCategories.add("abcdefghijklmnopqrstuvwxyz");
        if (useUpper) charCategories.add("ABCDEFGHIJKLMNOPQRSTUVWXYZ");
        if (useNumbers) charCategories.add("0123456789");
        if (useSymbols) charCategories.add("?!<>-*[]{}/");

        if (charCategories.isEmpty()) {
            return "";
        }

        for (int i = 0; i < length; i++) {
            String charCategory = charCategories.get(random.nextInt(charCategories.size()));
            int position = random.nextInt(charCategory.length());
            password.append(charCategory.charAt(position));
        }
        
        return new String(password);
    }
    
    private void SecurityPasswordActionPerformed(java.awt.event.ActionEvent evt) {
        Integer passwordSize = (Integer) PasswordSize.getValue();

        boolean useLower = LowercaseLetters.isSelected();
        boolean useUpper = Uppercase.isSelected();
        boolean useNumbers = Numbers.isSelected();
        boolean useSymbols = Symbol.isSelected();

        String generatedPassword = generatePassword(passwordSize, useLower, useUpper, useNumbers, useSymbols);

        if (generatedPassword.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Select all obbligatory option to generate a password", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        SecurityPassword.setText(generatedPassword);

        // Calcolare la forza della password generata
        int strength = calculatePasswordStrength(generatedPassword);
        String strengthText = getStrengthText(strength); // Funzione per ottenere il testo descrittivo della forza

        // Aggiornare la JLabel con la forza calcolata
        SecurityPassword.setText("Password Strength: " + strengthText);

        // Aggiorna l'interfaccia utente
        validate();
        repaint();
    }


    private int calculatePasswordStrength(String password) {
        // Esempio semplice di calcolo della forza della password
        int length = password.length();
        if (length < 8) {
            return 0; // Password debole
        } else if (length < 12) {
            return 1; // Password media
        } else {
            return 2; // Password forte
        }
    }

    private String getStrengthText(int strength) {
        switch (strength) {
            case 0:
                return "Weak";
            case 1:
                return "Medium";
            case 2:
                return "Strong";
            default:
                return "Unknown";
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        
        try {
            UIManager.setLookAndFeel(new FlatDarkLaf());
        } catch (Exception ex) {
            ex.printStackTrace();
        }

        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainGUI(null).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField AccountName;
    private javax.swing.JButton CancelButton;
    private javax.swing.JMenu CreditsMenu;
    private javax.swing.JButton DeletePasswordButton;
    private javax.swing.JMenuItem DeletePasswordMenu;
    private javax.swing.JPanel DeletePasswordPanel;
    private javax.swing.JTextField Email;
    private javax.swing.JMenu EntryListMenu;
    private javax.swing.JMenuItem EntryListMenu2;
    private javax.swing.JPanel EntryListPanel;
    private javax.swing.JButton GeneratePasswordButton;
    private javax.swing.JMenu LoginMenu;
    private javax.swing.JMenuItem LoginMenu2;
    private javax.swing.JMenu LogoutMenu;
    private javax.swing.JMenuItem LogoutMenu2;
    private javax.swing.JCheckBox LowercaseLetters;
    private javax.swing.JTabbedPane MainPanel;
    private javax.swing.JMenuItem MyFacebook;
    private javax.swing.JMenuItem MyGitHub;
    private javax.swing.JMenuItem MyLinkedin;
    private javax.swing.JMenuItem NewEntryMenu;
    private javax.swing.JPanel NewEntryPanel;
    private javax.swing.JTextArea Note;
    private javax.swing.JCheckBox Numbers;
    private javax.swing.JTextField OutputPassword;
    private javax.swing.JTextField Password;
    private javax.swing.JMenuItem PasswordGeneratorMenu;
    private javax.swing.JPanel PasswordGeneratorPanel;
    private javax.swing.JTextField PasswordSearch;
    private javax.swing.JButton PasswordSearchButton;
    private javax.swing.JSpinner PasswordSize;
    private javax.swing.JTextField PasswordToDelete;
    private javax.swing.JList<String> PasswordsList;
    private javax.swing.JMenuItem RegisterMenu;
    private javax.swing.JButton SaveButton;
    private javax.swing.JToggleButton SaveButton2;
    private javax.swing.JButton SavePasswordButton;
    private javax.swing.JLabel SecurityPassword;
    private javax.swing.JLabel SecurityPassword2;
    private javax.swing.JToggleButton SeePasswordsButton;
    private javax.swing.JCheckBox Symbol;
    private javax.swing.JCheckBox Uppercase;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JRadioButtonMenuItem jRadioButtonMenuItem1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    // End of variables declaration//GEN-END:variables
}
