/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.passwordmanager;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import javax.swing.JOptionPane;
import org.json.JSONArray;
import org.json.JSONObject;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.List;
/**
 *
 * @author Lorenzo
 */
public class PasswordManagerGUI extends javax.swing.JFrame {

    /**
     * Creates new form PasswordgeneratorGUI
     */
    public PasswordManagerGUI() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Title = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        PasswordSize = new javax.swing.JTextField();
        OutputPassword = new javax.swing.JTextField();
        GeneratePasswordButton = new javax.swing.JButton();
        Symbol = new javax.swing.JCheckBox();
        Uppercase = new javax.swing.JCheckBox();
        LowercaseLetters = new javax.swing.JCheckBox();
        SvaePasswordButton = new javax.swing.JButton();
        Numbers = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        Title.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        Title.setText("Password Generator");

        jLabel1.setText("Choose options to generate your password:");

        jLabel2.setText("Password size: ");

        PasswordSize.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PasswordSizeActionPerformed(evt);
            }
        });

        OutputPassword.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OutputPasswordActionPerformed(evt);
            }
        });

        GeneratePasswordButton.setText("Generate Password");
        GeneratePasswordButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GeneratePasswordButtonActionPerformed(evt);
            }
        });

        Symbol.setText("Symbol");

        Uppercase.setText("Uppercase");

        LowercaseLetters.setText("Lowercase letters");

        SvaePasswordButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/passwordmanager/img/filepng.png"))); // NOI18N

        Numbers.setText("Numbers");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Title)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(Symbol, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Uppercase, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(LowercaseLetters)
                            .addComponent(Numbers, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 239, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(PasswordSize, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(72, 72, 72)
                                .addComponent(OutputPassword, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(SvaePasswordButton, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(102, 102, 102)
                                .addComponent(GeneratePasswordButton)))))
                .addContainerGap(91, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(Title)
                .addGap(18, 18, 18)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(Symbol)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(LowercaseLetters)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Uppercase)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Numbers)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(PasswordSize, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(SvaePasswordButton, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(OutputPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(GeneratePasswordButton)
                .addContainerGap(48, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void GeneratePasswordButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GeneratePasswordButtonActionPerformed
    int passwordSize = getLenghtPassword();
        if (passwordSize <= 0) {
            return; // Gestisce la lunghezza della password non valida
        }

        boolean useLower = LowercaseLetters.isSelected();
        boolean useUpper = Uppercase.isSelected();
        boolean useNumbers = Numbers.isSelected();
        boolean useSymbols = Symbol.isSelected();

        String password = generatePassword(passwordSize, useLower, useUpper, useNumbers, useSymbols);
        
        // Controlla se il testo della password è vuoto
        if (password.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Impossibile generare la password", "Failure", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        // Imposta il campo di testo della password generata
        OutputPassword.setText(password);

    }//GEN-LAST:event_GeneratePasswordButtonActionPerformed
    public int getLenghtPassword(){
    String testo = PasswordSize.getText();
        // Controlla se il testo è vuoto
        if (testo.equals("")) {
            JOptionPane.showMessageDialog(this, "Enter a number for generate a password", "Failure", JOptionPane.ERROR_MESSAGE);
            return 0;
        }
        int lunghezza = Integer.parseInt(testo);
        return lunghezza;               					
    }
    private void PasswordSizeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PasswordSizeActionPerformed

    }//GEN-LAST:event_PasswordSizeActionPerformed

    private void OutputPasswordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OutputPasswordActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_OutputPasswordActionPerformed

    public void WritePasswordToJSON(String password, String passwordName){
       String filePath = "passwords.json";

        // Crea un nuovo oggetto JSON con le informazioni da aggiungere
        JSONObject newEntry = new JSONObject();
        newEntry.put("NomePassword", passwordName);
        newEntry.put("Password", password);

        try {
            File file = new File(filePath);
            JSONArray jsonArray;

            // Se il file esiste, leggi il contenuto e convertilo in un JSONArray
            if (file.exists()) {
                String content = new String(Files.readAllBytes(Paths.get(filePath)));
                if (content.isEmpty()) {
                    jsonArray = new JSONArray();
                } else {
                    jsonArray = new JSONArray(content);
                }
            } else {
                // Se il file non esiste, crea un nuovo JSONArray
                jsonArray = new JSONArray();
            }

            // Aggiungi il nuovo oggetto JSON al JSONArray
            jsonArray.put(newEntry);

            // Scrivi il JSONArray aggiornato nel file
            try (FileWriter fileWriter = new FileWriter(filePath)) {
                fileWriter.write(jsonArray.toString(4)); // Il parametro 4 è per l'indentazione del JSON
            }

            System.out.println("Informazioni aggiunte con successo.");
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
    private String generatePassword(int length, boolean useLower, boolean useUpper, boolean useNumbers, boolean useSymbols) {
        StringBuilder password = new StringBuilder(length);
        SecureRandom random = new SecureRandom();
        
        List<String> charCategories = new ArrayList<>();
        if (useLower) charCategories.add("abcdefghijklmnopqrstuvwxyz");
        if (useUpper) charCategories.add("ABCDEFGHIJKLMNOPQRSTUVWXYZ");
        if (useNumbers) charCategories.add("0123456789");
        if (useSymbols) charCategories.add("?!<>-*[]{}/");

        if (charCategories.isEmpty()) {
            return "";
        }

        for (int i = 0; i < length; i++) {
            String charCategory = charCategories.get(random.nextInt(charCategories.size()));
            int position = random.nextInt(charCategory.length());
            password.append(charCategory.charAt(position));
        }
        
        return new String(password);
    }
    /**
     * @param args the command line arguments
     */
public static void main(String args[]) {
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PasswordManagerGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PasswordManagerGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PasswordManagerGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PasswordManagerGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }

        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PasswordManagerGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton GeneratePasswordButton;
    private javax.swing.JCheckBox LowercaseLetters;
    private javax.swing.JCheckBox Numbers;
    private javax.swing.JTextField OutputPassword;
    private javax.swing.JTextField PasswordSize;
    private javax.swing.JButton SvaePasswordButton;
    private javax.swing.JCheckBox Symbol;
    private javax.swing.JLabel Title;
    private javax.swing.JCheckBox Uppercase;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    // End of variables declaration//GEN-END:variables
}
