/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.passwordmanager;

import com.formdev.flatlaf.FlatDarkLaf;
import com.formdev.flatlaf.FlatIntelliJLaf;
import java.awt.Image;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import javax.swing.JOptionPane;
import org.json.JSONArray;
import org.json.JSONObject;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.List;
import javax.swing.ImageIcon;
import javax.swing.UIManager;
/**
 *
 * @author Lorenzo
 */
public class PasswordManagerGUI extends javax.swing.JFrame {
    
    /**
     * Creates new form PasswordgeneratorGUI
     */
    public PasswordManagerGUI() {  //costruttore
        initComponents();
        
        //logo application
        Image icon = new ImageIcon (this.getClass().getResource("/images/logoIcon.png")).getImage();
        this.setIconImage(icon);  
    }
    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Title = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        OutputPassword = new javax.swing.JTextField();
        GeneratePasswordButton = new javax.swing.JButton();
        Symbol = new javax.swing.JCheckBox();
        Uppercase = new javax.swing.JCheckBox();
        LowercaseLetters = new javax.swing.JCheckBox();
        Numbers = new javax.swing.JCheckBox();
        PasswordSize = new javax.swing.JSpinner();
        LoginButton = new javax.swing.JButton();
        RegisterButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        Title.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        Title.setText("Password Generator");

        jLabel1.setText("Choose options to generate your password:");

        OutputPassword.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OutputPasswordActionPerformed(evt);
            }
        });

        GeneratePasswordButton.setText("Generate Password");
        GeneratePasswordButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GeneratePasswordButtonActionPerformed(evt);
            }
        });

        Symbol.setText(" Special characters");

        Uppercase.setText("Uppercase");

        LowercaseLetters.setText("Lowercase letters");

        Numbers.setText("Numbers");

        PasswordSize.setToolTipText("Password size");

        LoginButton.setText("Login");
        LoginButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LoginButtonActionPerformed(evt);
            }
        });

        RegisterButton.setText("Register");
        RegisterButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RegisterButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(Uppercase, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(LowercaseLetters)
                            .addComponent(Numbers, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(PasswordSize, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Symbol)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(24, 24, 24)
                                .addComponent(GeneratePasswordButton))
                            .addComponent(OutputPassword, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 239, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(47, 47, 47)
                        .addComponent(Title)
                        .addGap(53, 53, 53)
                        .addComponent(RegisterButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(LoginButton)))
                .addContainerGap(37, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Title)
                    .addComponent(LoginButton)
                    .addComponent(RegisterButton))
                .addGap(18, 18, 18)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(Symbol)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(LowercaseLetters)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Uppercase)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Numbers)
                .addGap(18, 18, 18)
                .addComponent(PasswordSize, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(OutputPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(GeneratePasswordButton)
                .addContainerGap(22, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void GeneratePasswordButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GeneratePasswordButtonActionPerformed
        Integer passwordSize = (Integer)PasswordSize.getValue();

        boolean useLower = LowercaseLetters.isSelected();
        boolean useUpper = Uppercase.isSelected();
        boolean useNumbers = Numbers.isSelected();
        boolean useSymbols = Symbol.isSelected();

        String password = generatePassword(passwordSize, useLower, useUpper, useNumbers, useSymbols);
        
        if (password.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Seleziona almeno un'opzione per generare la password.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        OutputPassword.setText(password);
        
       


    }//GEN-LAST:event_GeneratePasswordButtonActionPerformed
   
    private void OutputPasswordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OutputPasswordActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_OutputPasswordActionPerformed

    private void LoginButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LoginButtonActionPerformed
        //apre un nuovo frame
        LoginGUI saveFrame = new LoginGUI();
        saveFrame.setVisible(true);
    }//GEN-LAST:event_LoginButtonActionPerformed

    private void RegisterButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RegisterButtonActionPerformed
        //apre un nuovo frame
        RegisterGUI registerFrame = new RegisterGUI();
        registerFrame.setVisible(true);
    }//GEN-LAST:event_RegisterButtonActionPerformed
    
    private String generatePassword(int length, boolean useLower, boolean useUpper, boolean useNumbers, boolean useSymbols) {
        StringBuilder password = new StringBuilder(length);
        SecureRandom random = new SecureRandom();
        
        List<String> charCategories = new ArrayList<>();
        if (useLower) charCategories.add("abcdefghijklmnopqrstuvwxyz");
        if (useUpper) charCategories.add("ABCDEFGHIJKLMNOPQRSTUVWXYZ");
        if (useNumbers) charCategories.add("0123456789");
        if (useSymbols) charCategories.add("?!<>-*[]{}/");

        if (charCategories.isEmpty()) {
            return "";
        }

        for (int i = 0; i < length; i++) {
            String charCategory = charCategories.get(random.nextInt(charCategories.size()));
            int position = random.nextInt(charCategory.length());
            password.append(charCategory.charAt(position));
        }
        
        return new String(password);
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        
        try {
            UIManager.setLookAndFeel(new FlatDarkLaf());
        } catch (Exception ex) {
            ex.printStackTrace();
        }
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PasswordManagerGUI().setVisible(true);
            }
        });
        
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton GeneratePasswordButton;
    private javax.swing.JButton LoginButton;
    private javax.swing.JCheckBox LowercaseLetters;
    private javax.swing.JCheckBox Numbers;
    private javax.swing.JTextField OutputPassword;
    private javax.swing.JSpinner PasswordSize;
    private javax.swing.JButton RegisterButton;
    private javax.swing.JCheckBox Symbol;
    private javax.swing.JLabel Title;
    private javax.swing.JCheckBox Uppercase;
    private javax.swing.JLabel jLabel1;
    // End of variables declaration//GEN-END:variables
}
